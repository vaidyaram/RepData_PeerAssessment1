#The third column is the interval data point
intervalTmp<-unique(dataByIntervalsWeekdays[[i]][[3]])
#get the average number of steps taken for each weekday, weekend combination
#First column contains the number of steps
weekdayTmp<-mean(dataByIntervalsWeekdays[[i]][[1]])
#add this row to summary information per interval
intervalStepsWeekdayData<-rbind(intervalStepsWeekdayData,c(intervalTmp,weekdayTmp,weekdayTmp))
}
View(intervalStepsWeekdayData)
listLength<-length(dataByIntervalsWeekdays)
intervalStepsWeekdayData<-data.frame()
for (i in seq(from=1, to=listLength, by=1))
{
# The fifth column is the identifier if its a weekday or not
weekdayTmp<-unique(dataByIntervalsWeekdays[[i]][[5]])
#The third column is the interval data point
intervalTmp<-unique(dataByIntervalsWeekdays[[i]][[3]])
#get the average number of steps taken for each weekday, weekend combination
#First column contains the number of steps
averageStepsTmp<-mean(dataByIntervalsWeekdays[[i]][[1]])
#add this row to summary information per interval
intervalStepsWeekdayData<-rbind(intervalStepsWeekdayData,c(intervalTmp,weekdayTmp,averageStepsTmp))
}
View(intervalStepsWeekdayData)
levels(data$isWeekday)
library(lattice)
colnames(intervalStepsData)<-c("Interval","isWeekday","Number of steps")
colnames(intervalStepsWeekdayData)<-c("Interval","isWeekday","Number of steps")
xyplot(Interval~"Number of steps"| isWeekday, data = intervalStepsWeekdayData, type = "l", layout=c(1,2))
names(intervalStepsWeekdayData)
unique(intervalStepsWeekdayData$isWeekday)
as.character(intervalStepsWeekdayData$isWeekday)
xyplot("Number of steps"~Interval| isWeekday, data = intervalStepsWeekdayData, type = "l", layout=c(1,2))
xyplot("Number of steps"~Interval, data = intervalStepsWeekdayData)
intervalStepsWeekdayData$"Number of steps"
intervalStepsWeekdayData$"intervalStepsWeekdayData"<-round(intervalStepsWeekdayData$"intervalStepsWeekdayData", digits = 1)
class(intervalStepsWeekdayData$"intervalStepsWeekdayData")
View(intervalStepsWeekdayData$"Number of steps")
class(intervalStepsWeekdayData$"Number of steps")
intervalStepsWeekdayData$"Number of steps"<-round(intervalStepsWeekdayData$"Number of steps", digits = 1)
View(intervalStepsWeekdayData$"Number of steps")
xyplot("Number of steps"~Interval, data = intervalStepsWeekdayData)
View(intervalStepsWeekdayData$Interval)
class(intervalStepsWeekdayData$Interval)
xyplot("Number of steps"~Interval, data = intervalStepsWeekdayData)
is.na(intervalStepsWeekdayData$Interval)
g <- ggplot(intervalStepsWeekdayData, aes(Interval, "Number of steps"))
g<-g+geom_line(aes(Interval, "Number of steps"), color = "blue")+
theme(plot.title = element_text(size = rel(0.95)))
print(g)
View(intervalStepsWeekdayData)
g <- ggplot(intervalStepsWeekdayData, aes(Interval, "Number of steps"))
g<-g+geom_line(aes(Interval, "Number of steps"), color = "blue")
print(g)
xyplot(Interval ~ "Number of steps", data = intervalStepsWeekdayData)
class(intervalStepsWeekdayData$Interval)
class(intervalStepsWeekdayData$"Number of steps")
xyplot(factor(Interval) ~ "Number of steps", data = intervalStepsWeekdayData)
xyplot(Interval ~ "Number of steps", data = intervalStepsWeekdayData)
class(intervalStepsWeekdayData)
class(intervalStepsWeekdayData$Interval)
class(intervalStepsWeekdayData$"Number of steps")
intervalStepsWeekdayData$Interval
intervalStepsWeekdayData$"Number of steps"
xyplot("Number of steps"~Interval, data = intervalStepsWeekdayData)
dotplot("Number of steps"~Interval, data = intervalStepsWeekdayData)
xyplot("Number of steps"~ Interval, data = intervalStepsWeekdayData)
warnings()
intervalStepsData
xyplot(interval_identifier ~ avgStepsAcrossAllDays, data = intervalStepsData)
class(interval_identifier)
class(intervalStepsData$interval_identifier)
class(intervalStepsData$avgStepsAcrossAllDays)
class(intervalStepsWeekdayData$"Number of steps")
class(intervalStepsWeekdayData$Interval)
colnames(intervalStepsWeekdayData)<-c("Interval","isWeekday","Number_of_steps")
intervalStepsWeekdayData$Number_of_steps<-round(intervalStepsWeekdayData$Number_of_steps, digits = 1)
intervalStepsWeekdayData$Number_of_steps<-round(intervalStepsWeekdayData$Number_of_steps, digits = 1)
xyplot(Number_of_steps ~ Interval, data = intervalStepsWeekdayData)
xyplot(Number_of_steps ~ Interval| isWeekday, data = intervalStepsWeekdayData layout = c(1,2))
xyplot(Number_of_steps ~ Interval| isWeekday, data = intervalStepsWeekdayData, layout = c(1,2))
xyplot(Number_of_steps ~ Interval| isWeekday, data = intervalStepsWeekdayData, type = "l", layout = c(1,2))
xyplot(interval_identifier ~ avgStepsAcrossAllDays, data = intervalStepsData)
xyplot(interval_identifier ~ avgStepsAcrossAllDays, data = intervalStepsData, type = "l")
xyplot(avgStepsAcrossAllDays ~ interval_identifier, data = intervalStepsData, type = "l")
View(intervalStepsData)
intervalStepsWeekdayData[order(intervalStepsWeekdayData$Interval),]
xyplot(Number_of_steps ~ Interval| isWeekday, data = intervalStepsWeekdayData, type = "l", layout = c(1,2))
xyplot(Number_of_steps ~ Interval, data = intervalStepsWeekdayData, type = "l", layout = c(1,2))
View(intervalStepsWeekdayData)
intervalStepsWeekdayData[order(intervalStepsWeekdayData$Interval),]
intervalStepsWeekdayData<-intervalStepsWeekdayData[order(intervalStepsWeekdayData$Interval),]
View(intervalStepsWeekdayData)
View(intervalStepsWeekdayData)
names(intervalStepsWeekdayData)
xyplot(Number_of_steps ~ Interval, data = intervalStepsWeekdayData, type = "l", layout = c(1,2))
xyplot(Number_of_steps ~ Interval | isWeekday , data = intervalStepsWeekdayData, type = "l", layout = c(1,2))
as.character(isWeekday)
as.character(intervalStepsWeekdayData$isWeekday)
levels(intervalStepsWeekdayData)
levels(intervalStepsWeekdayData$isWeekday)
data[(data$weekday == "Monday" |
data$weekday == "Tuesday"|
data$weekday == "Wednesday"|
data$weekday == "Thursday"|
data$weekday == "Friday"),"isWeekday"]<-"weekday"
#add column variable to identify Saturday, Sunday,as weekend
data[(data$weekday == "Saturday" |
data$weekday == "Sunday")
,"isWeekday"]<-"weekend"
dataByIntervalsWeekdays <- split(data, paste(data$interval,data$isWeekday))
listLength<-length(dataByIntervalsWeekdays)
intervalStepsWeekdayData<-data.frame()
for (i in seq(from=1, to=listLength, by=1))
{
# The fifth column is the identifier if its a weekday or not
weekdayTmp<-unique(dataByIntervalsWeekdays[[i]][[5]])
#The third column is the interval data point
intervalTmp<-unique(dataByIntervalsWeekdays[[i]][[3]])
#get the average number of steps taken for each weekday, weekend combination
#First column contains the number of steps
averageStepsTmp<-mean(dataByIntervalsWeekdays[[i]][[1]])
#add this row to summary information per interval
intervalStepsWeekdayData<-rbind(intervalStepsWeekdayData,c(intervalTmp,weekdayTmp,averageStepsTmp))
}
colnames(intervalStepsWeekdayData)<-c("Interval","isWeekday","Number_of_steps")
#round the Number_of_steps variable to one decimal for ease of plotting and reading
intervalStepsWeekdayData$Number_of_steps<-round(intervalStepsWeekdayData$Number_of_steps, digits = 1)
#order the data based on intervals
intervalStepsWeekdayData<-intervalStepsWeekdayData[order(intervalStepsWeekdayData$Interval),]
#create a lattice plot for the weekday
xyplot(Number_of_steps ~ Interval | isWeekday , data = intervalStepsWeekdayData, type = "l", layout = c(1,2))
xyplot(Number_of_steps ~ Interval | isWeekday , data = intervalStepsWeekdayData, type = "l", layout = c(1,2))
unique(intervalStepsWeekdayData$isWeekday)
data = read.csv("./data/activity.csv", header=TRUE,  na.strings = "NA", stringsAsFactors = FALSE)
data$date<-as.Date(data$date)
stepsSummaryData<-ddply(data,"date",summarize, totalSteps = sum(steps))
intervals<-unique(data$interval)
#iterate through the subset of each interval and replace NA with the mean of steps for each interval
for (i in intervals)
{
#get the mean number of steps for the given interval
#steps is stored in the first column data set
stepsTmp<-mean(data[data$interval == i,1], na.rm =TRUE)
#get the rows with NA values for the current interval and replace with mean value
#stored in stepsTmp
#steps is in the first column of the data set
data[(data$interval == i & is.na(data$steps)),1]<-stepsTmp
}
#add column variable to identify Monday, Tuesday, Wednesday, Thursday, Friday as weekday
data[(data$weekday == "Monday" |
data$weekday == "Tuesday"|
data$weekday == "Wednesday"|
data$weekday == "Thursday"|
data$weekday == "Friday"),"isWeekday"]<-"weekday"
#add column variable to identify Saturday, Sunday,as weekend
data[(data$weekday == "Saturday" |
data$weekday == "Sunday")
,"isWeekday"]<-"weekend"
listLength<-length(dataByIntervalsWeekdays)
intervalStepsWeekdayData<-data.frame()
for (i in seq(from=1, to=listLength, by=1))
{
# The fifth column is the identifier if its a weekday or not
weekdayTmp<-unique(dataByIntervalsWeekdays[[i]][[5]])
#The third column is the interval data point
intervalTmp<-unique(dataByIntervalsWeekdays[[i]][[3]])
#get the average number of steps taken for each weekday, weekend combination
#First column contains the number of steps
averageStepsTmp<-mean(dataByIntervalsWeekdays[[i]][[1]])
#add this row to summary information per interval
intervalStepsWeekdayData<-rbind(intervalStepsWeekdayData,c(intervalTmp,weekdayTmp,averageStepsTmp))
}
colnames(intervalStepsWeekdayData)<-c("Interval","isWeekday","Number_of_steps")
#round the Number_of_steps variable to one decimal for ease of plotting and reading
intervalStepsWeekdayData$Number_of_steps<-round(intervalStepsWeekdayData$Number_of_steps, digits = 1)
#order the data based on intervals
intervalStepsWeekdayData<-intervalStepsWeekdayData[order(intervalStepsWeekdayData$Interval),]
#create a lattice plot for the weekday
xyplot(Number_of_steps ~ Interval | isWeekday , data = intervalStepsWeekdayData, type = "l", layout = c(1,2))
intervalStepsWeekdayData$isWeekday
levels(intervalStepsWeekdayData$isWeekday)
class(intervalStepsWeekdayData$isWeekday)
class(data$isWeekday)
class(intervalStepsWeekdayData$isWeekday)
data$isWeekday<-as.factor(data$isWeekday)
#split the data based on intervals and weekdays
dataByIntervalsWeekdays <- split(data, paste(data$interval,data$isWeekday))
#iterate through the all combinations of weekday and intervals to calculate the
#avergage number of steps taken per weekeday or weekend
listLength<-length(dataByIntervalsWeekdays)
intervalStepsWeekdayData<-data.frame()
for (i in seq(from=1, to=listLength, by=1))
{
# The fifth column is the identifier if its a weekday or not
weekdayTmp<-unique(dataByIntervalsWeekdays[[i]][[5]])
#The third column is the interval data point
intervalTmp<-unique(dataByIntervalsWeekdays[[i]][[3]])
#get the average number of steps taken for each weekday, weekend combination
#First column contains the number of steps
averageStepsTmp<-mean(dataByIntervalsWeekdays[[i]][[1]])
#add this row to summary information per interval
intervalStepsWeekdayData<-rbind(intervalStepsWeekdayData,c(intervalTmp,weekdayTmp,averageStepsTmp))
}
colnames(intervalStepsWeekdayData)<-c("Interval","isWeekday","Number_of_steps")
#round the Number_of_steps variable to one decimal for ease of plotting and reading
intervalStepsWeekdayData$Number_of_steps<-round(intervalStepsWeekdayData$Number_of_steps, digits = 1)
#order the data based on intervals
intervalStepsWeekdayData<-intervalStepsWeekdayData[order(intervalStepsWeekdayData$Interval),]
#create a lattice plot for the weekday
xyplot(Number_of_steps ~ Interval | isWeekday , data = intervalStepsWeekdayData, type = "l", layout = c(1,2))
dataByIntervalsWeekdays <- split(data, paste(data$interval,data$isWeekday))
listLength<-length(dataByIntervalsWeekdays)
intervalStepsWeekdayData<-data.frame()
for (i in seq(from=1, to=listLength, by=1))
{
# The fifth column is the identifier if its a weekday or not
weekdayTmp<-unique(dataByIntervalsWeekdays[[i]][[5]])
#The third column is the interval data point
intervalTmp<-unique(dataByIntervalsWeekdays[[i]][[3]])
#get the average number of steps taken for each weekday, weekend combination
#First column contains the number of steps
averageStepsTmp<-mean(dataByIntervalsWeekdays[[i]][[1]])
#add this row to summary information per interval
intervalStepsWeekdayData<-rbind(intervalStepsWeekdayData,c(intervalTmp,weekdayTmp,averageStepsTmp))
}
data = read.csv("./data/activity.csv", header=TRUE,  na.strings = "NA", stringsAsFactors = FALSE)
data$date<-as.Date(data$date)
#iterate through the subset of each interval and replace NA with the mean of steps for each interval
for (i in intervals)
{
#get the mean number of steps for the given interval
#steps is stored in the first column data set
stepsTmp<-mean(data[data$interval == i,1], na.rm =TRUE)
#get the rows with NA values for the current interval and replace with mean value
#stored in stepsTmp
#steps is in the first column of the data set
data[(data$interval == i & is.na(data$steps)),1]<-stepsTmp
}
intervals<-unique(data$interval)
for (i in intervals)
{
#get the mean number of steps for the given interval
#steps is stored in the first column data set
stepsTmp<-mean(data[data$interval == i,1], na.rm =TRUE)
#get the rows with NA values for the current interval and replace with mean value
#stored in stepsTmp
#steps is in the first column of the data set
data[(data$interval == i & is.na(data$steps)),1]<-stepsTmp
}
#add column variable to identify Monday, Tuesday, Wednesday, Thursday, Friday as weekday
data[(data$weekday == "Monday" |
data$weekday == "Tuesday"|
data$weekday == "Wednesday"|
data$weekday == "Thursday"|
data$weekday == "Friday"),"isWeekday"]<-"weekday"
#add column variable to identify Saturday, Sunday,as weekend
data[(data$weekday == "Saturday" |
data$weekday == "Sunday")
,"isWeekday"]<-"weekend"
data$isWeekday<-as.factor(data$isWeekday)
class(data$isWeekday)
levels(data$isWeekday)
unique(data$isWeekday)
data$weekday<-weekdays(data$date)
data[(data$weekday == "Monday" |
data$weekday == "Tuesday"|
data$weekday == "Wednesday"|
data$weekday == "Thursday"|
data$weekday == "Friday"),"isWeekday"]<-"weekday"
#add column variable to identify Saturday, Sunday,as weekend
data[(data$weekday == "Saturday" |
data$weekday == "Sunday")
,"isWeekday"]<-"weekend"
names(data$weekday)
data$weekday<-weekdays(data$date)
View(data$weekday)
data[(data$weekday == "Monday" |
data$weekday == "Tuesday"|
data$weekday == "Wednesday"|
data$weekday == "Thursday"|
data$weekday == "Friday"),"isWeekday"]<-"weekday"
data = read.csv("./data/activity.csv", header=TRUE,  na.strings = "NA", stringsAsFactors = FALSE)
data$date<-as.Date(data$date)
intervals<-unique(data$interval)
for (i in intervals)
{
#get the mean number of steps for the given interval
#steps is stored in the first column data set
stepsTmp<-mean(data[data$interval == i,1], na.rm =TRUE)
#get the rows with NA values for the current interval and replace with mean value
#stored in stepsTmp
#steps is in the first column of the data set
data[(data$interval == i & is.na(data$steps)),1]<-stepsTmp
}
data$weekday<-weekdays(data$date)
data$weekday
data[(data$weekday == "Monday" |
data$weekday == "Tuesday"|
data$weekday == "Wednesday"|
data$weekday == "Thursday"|
data$weekday == "Friday"),"isWeekday"]<-"weekday"
data[(data$weekday == "Saturday" |
data$weekday == "Sunday")
,"isWeekday"]<-"weekend"
data$isWeekday<-as.factor(data$isWeekday)
levels(data$isWeekday)
dataByIntervalsWeekdays <- split(data, paste(data$interval,data$isWeekday))
listLength<-length(dataByIntervalsWeekdays)
intervalStepsWeekdayData<-data.frame()
for (i in seq(from=1, to=listLength, by=1))
{
# The fifth column is the identifier if its a weekday or not
weekdayTmp<-unique(dataByIntervalsWeekdays[[i]][[5]])
#The third column is the interval data point
intervalTmp<-unique(dataByIntervalsWeekdays[[i]][[3]])
#get the average number of steps taken for each weekday, weekend combination
#First column contains the number of steps
averageStepsTmp<-mean(dataByIntervalsWeekdays[[i]][[1]])
#add this row to summary information per interval
intervalStepsWeekdayData<-rbind(intervalStepsWeekdayData,c(intervalTmp,weekdayTmp,averageStepsTmp))
}
colnames(intervalStepsWeekdayData)<-c("Interval","isWeekday","Number_of_steps")
class(intervalStepsWeekdayData$isWeekday)
unique(intervalStepsWeekdayData$isWeekday)
intervalStepsWeekdayData$Number_of_steps<-round(intervalStepsWeekdayData$Number_of_steps, digits = 1)
intervalStepsWeekdayData<-intervalStepsWeekdayData[order(intervalStepsWeekdayData$Interval),]
xyplot(Number_of_steps ~ Interval | isWeekday , data = intervalStepsWeekdayData, type = "l", layout = c(1,2))
xyplot(Number_of_steps ~ Interval | isWeekday , data = intervalStepsWeekdayData, type = "l", layout = c(1,2))
intervalStepsWeekdayData$isWeekday<-as.factor(intervalStepsWeekdayData$isWeekday)
xyplot(Number_of_steps ~ Interval | isWeekday , data = intervalStepsWeekdayData, type = "l", layout = c(1,2))
factor(intervalStepsWeekdayData$isWeekday, levels = c("weekday","weekend"))
xyplot(Number_of_steps ~ Interval | isWeekday , data = intervalStepsWeekdayData, type = "l", layout = c(1,2))
intervalStepsWeekdayData$isWeekday
class(intervalStepsWeekdayData$isWeekday)
levels(intervalStepsWeekdayData$isWeekday)
levels(intervalStepsWeekdayData$isWeekday) <- c("weekday","weekend"))
levels(intervalStepsWeekdayData$isWeekday) <- c("weekday","weekend")
levels(intervalStepsWeekdayData$isWeekday)
xyplot(Number_of_steps ~ Interval | isWeekday , data = intervalStepsWeekdayData, type = "l", layout = c(1,2))
xyplot(Number_of_steps ~ Interval | isWeekday , data = intervalStepsWeekdayData, type = "l", layout = c(1,2),
xlab = "Interval", ylab = "Number of steps")
```{r , echo = TRUE}
install.packages("RCurl")
getwd()
getwd()
unz("./data/activity.zip")
library(plyr)
library(ggplot2)
library(lattice)
data = read.csv("./data/activity.csv", header=TRUE,  na.strings = "NA", stringsAsFactors = FALSE)
intervals<-unique(data$interval)
#iterate through the subset of each interval and replace NA with the mean of steps for each interval
for (i in intervals)
{
#get the mean number of steps for the given interval
#steps is stored in the first column data set
stepsTmp<-mean(data[data$interval == i,1], na.rm =TRUE)
#get the rows with NA values for the current interval and replace with mean value
#stored in stepsTmp
#steps is in the first column of the data set
data[(data$interval == i & is.na(data$steps)),1]<-stepsTmp
}
#Are there differences in activity patterns between weekdays and weekends?
#Add a new column to get the weekday corresponding to the date
data$weekday<-weekdays(data$date)
#add column variable to identify Monday, Tuesday, Wednesday, Thursday, Friday as weekday
data[(data$weekday == "Monday" |
data$weekday == "Tuesday"|
data$weekday == "Wednesday"|
data$weekday == "Thursday"|
data$weekday == "Friday"),"isWeekday"]<-"weekday"
#add column variable to identify Saturday, Sunday,as weekend
data[(data$weekday == "Saturday" |
data$weekday == "Sunday")
,"isWeekday"]<-"weekend"
#Convert isWeekday into a factor variable
data$isWeekday<-as.factor(data$isWeekday)
#split the data based on intervals and weekdays
dataByIntervalsWeekdays <- split(data, paste(data$interval,data$isWeekday))
#iterate through the all combinations of weekday and intervals to calculate the
#avergage number of steps taken per weekeday or weekend
listLength<-length(dataByIntervalsWeekdays)
intervalStepsWeekdayData<-data.frame()
for (i in seq(from=1, to=listLength, by=1))
{
# The fifth column is the identifier if its a weekday or not
weekdayTmp<-unique(dataByIntervalsWeekdays[[i]][[5]])
#The third column is the interval data point
intervalTmp<-unique(dataByIntervalsWeekdays[[i]][[3]])
#get the average number of steps taken for each weekday, weekend combination
#First column contains the number of steps
averageStepsTmp<-mean(dataByIntervalsWeekdays[[i]][[1]])
#add this row to summary information per interval
intervalStepsWeekdayData<-rbind(intervalStepsWeekdayData,c(intervalTmp,weekdayTmp,averageStepsTmp))
}
colnames(intervalStepsWeekdayData)<-c("Interval","isWeekday","Number_of_steps")
#round the Number_of_steps variable to one decimal for ease of plotting and reading
intervalStepsWeekdayData$Number_of_steps<-round(intervalStepsWeekdayData$Number_of_steps, digits = 1)
#order the data based on intervals
intervalStepsWeekdayData<-intervalStepsWeekdayData[order(intervalStepsWeekdayData$Interval),]
#Change isWeekday into a factor variable
levels(intervalStepsWeekdayData$isWeekday) <- c("weekday","weekend")
#create a lattice plot for the weekday
xyplot(Number_of_steps ~ Interval | isWeekday , data = intervalStepsWeekdayData, type = "l", layout = c(1,2),
xlab = "Interval", ylab = "Number of steps")
#Are there differences in activity patterns between weekdays and weekends?
#Add a new column to get the weekday corresponding to the date
data$weekday<-weekdays(data$date)
#add column variable to identify Monday, Tuesday, Wednesday, Thursday, Friday as weekday
data[(data$weekday == "Monday" |
data$weekday == "Tuesday"|
data$weekday == "Wednesday"|
data$weekday == "Thursday"|
data$weekday == "Friday"),"isW
#Are there differences in activity patterns between weekdays and weekends?
#Add a new column to get the weekday corresponding to the date
data$weekday<-weekdays(data$date)
#add column variable to identify Monday, Tuesday, Wednesday, Thursday, Friday as weekday
data[(data$weekday == "Monday" |
data$weekday == "Tuesday"|
data$weekday == "Wednesday"|
data$weekday == "Thursday"|
data$weekday == "Friday"),"isWeekday"]<-"weekday"
data = read.csv("./data/activity.csv", header=TRUE,  na.strings = "NA", stringsAsFactors = FALSE)
#convert date column from character to Date class
data$date<-as.Date(data$date)
#iterate through the subset of each interval and replace NA with the mean of steps for each interval
for (i in intervals)
{
#get the mean number of steps for the given interval
#steps is stored in the first column data set
stepsTmp<-mean(data[data$interval == i,1], na.rm =TRUE)
#get the rows with NA values for the current interval and replace with mean value
#stored in stepsTmp
#steps is in the first column of the data set
data[(data$interval == i & is.na(data$steps)),1]<-stepsTmp
}
intervals<-unique(data$interval)
#iterate through the subset of each interval and replace NA with the mean of steps for each interval
for (i in intervals)
{
#get the mean number of steps for the given interval
#steps is stored in the first column data set
stepsTmp<-mean(data[data$interval == i,1], na.rm =TRUE)
#get the rows with NA values for the current interval and replace with mean value
#stored in stepsTmp
#steps is in the first column of the data set
data[(data$interval == i & is.na(data$steps)),1]<-stepsTmp
}
data$weekday<-weekdays(data$date)
#add column variable to identify Monday, Tuesday, Wednesday, Thursday, Friday as weekday
data[(data$weekday == "Monday" |
data$weekday == "Tuesday"|
data$weekday == "Wednesday"|
data$weekday == "Thursday"|
data$weekday == "Friday"),"isWeekday"]<-"weekday"
#add column variable to identify Saturday, Sunday,as weekend
data[(data$weekday == "Saturday" |
data$weekday == "Sunday")
,"isWeekday"]<-"weekend"
#Convert isWeekday into a factor variable
data$isWeekday<-as.factor(data$isWeekday)
levels(data$isWeekday)
newIsWeekday<-as.numeric(data$isWeekday)
levels(newIsWeekday)
#split the data based on intervals and weekdays
dataByIntervalsWeekdays <- split(data, paste(data$interval,data$isWeekday))
#iterate through the all combinations of weekday and intervals to calculate the
#avergage number of steps taken per weekeday or weekend
listLength<-length(dataByIntervalsWeekdays)
intervalStepsWeekdayData<-data.frame()
for (i in seq(from=1, to=listLength, by=1))
{
# The fifth column is the identifier if its a weekday or not
weekdayTmp<-unique(dataByIntervalsWeekdays[[i]][[5]])
#The third column is the interval data point
intervalTmp<-unique(dataByIntervalsWeekdays[[i]][[3]])
#get the average number of steps taken for each weekday, weekend combination
#First column contains the number of steps
averageStepsTmp<-mean(dataByIntervalsWeekdays[[i]][[1]])
#add this row to summary information per interval
intervalStepsWeekdayData<-rbind(intervalStepsWeekdayData,c(intervalTmp,weekdayTmp,averageStepsTmp))
}
colnames(intervalStepsWeekdayData)<-c("Interval","isWeekday","Number_of_steps")
#round the Number_of_steps variable to one decimal for ease of plotting and reading
intervalStepsWeekdayData$Number_of_steps<-round(intervalStepsWeekdayData$Number_of_steps, digits = 1)
#order the data based on intervals
intervalStepsWeekdayData<-intervalStepsWeekdayData[order(intervalStepsWeekdayData$Interval),]
#Change isWeekday into a factor variable
levels(intervalStepsWeekdayData$isWeekday) <- c("weekday","weekend")
#create a lattice plot for the weekday
xyplot(Number_of_steps ~ Interval | isWeekday , data = intervalStepsWeekdayData, type = "l", layout = c(1,2),
xlab = "Interval", ylab = "Number of steps")
levels(intervalStepsWeekdayData$isWeekday)
levels(intervalStepsWeekdayData$isWeekday) <- c("weekday","weekend")
xyplot(Number_of_steps ~ Interval | isWeekday , data = intervalStepsWeekdayData, type = "l", layout = c(1,2),
xlab = "Interval", ylab = "Number of steps")
intervalStepsWeekdayData$isWeekday<-as.factor(intervalStepsWeekdayData$isWeekday)
levels(intervalStepsWeekdayData$isWeekday) <- c("weekday","weekend")
xyplot(Number_of_steps ~ Interval | isWeekday , data = intervalStepsWeekdayData, type = "l", layout = c(1,2),
xlab = "Interval", ylab = "Number of steps")
pwd
getwd()
setwd("C:/Backup/Jagat/Statistics/Data Sciences Specialization/Reproducible Research")
dir
ls
getwd()
setwd("C:/Backup/Jagat/Statistics/Data Sciences Specialization/Reproducible Research/RepData_PeerAssessment1")
knit2html("PA1_template.Rmd")
library(knitr)
knit2html("PA1_template.Rmd")
